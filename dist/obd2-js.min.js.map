{"version":3,"sources":["obd2-js.min.js"],"names":["angular","module","factory","toBitmask","codedValue","valueArray","codedValueWithoutSpaces","replace","WHITE_SPACES","result","length","Error","ERR_INVALID_INPUT","match","index","binaryRepresentation","parseInt","toString","parseAnswer","answer","answerWithoutSpaces","console","log","answerFor","substring"],"mappings":"CAAA,WACI,YAGAA,SAAQC,OAAO,QACX,kBAGR,WACI,YAGAD,SACKC,OAAO,oBAEhB,WACI,YAGAD,SACKC,OAAO,cACPC,QAAQ,gBAAiB,WAKtB,QAASC,GAAUC,GACf,GACIC,GADAC,EAA0BF,EAAWG,QAAQC,EAAc,IAE3DC,EAAS,EACb,IAAIH,EAAwBI,OAAS,IAAM,EACvC,KAAM,IAAIC,OAAMC,EAEpBP,GAAaC,EAAwBO,MAAM,UAC3C,KAAI,GAAIC,GAAQ,EAAGA,EAAQT,EAAWK,OAAQI,IAAS,CAEnD,IADA,GAAIC,GAAuBC,SAASX,EAAWS,GAAQ,IAAIG,SAAS,GAC9DF,EAAqBL,OAAS,GAChCK,EAAuB,IAAMA,CAEjCN,IAAUM,EAEd,MAAON,GAGX,QAASS,GAAYC,GACjB,GAAIV,MACAW,EAAsBD,EAAOZ,QAAQC,EAAc,GAEvD,IADIa,QAAQC,IAAIF,EAAoBV,QAAU,GAC3CU,EAAoBV,QAAU,GAAKU,EAAoBV,OAAS,IAAM,EACrE,KAAM,IAAIC,OAAMC,EAMpB,OAJAH,IACIc,UAAWH,EAAoBI,UAAU,EAAE,GAC3CL,OAAQC,EAAoBI,UAAU,IA/B9C,GAAIZ,GAAoB,gBAEpBJ,EAAe,KAiCnB,QACIL,UAAWA,EACXe,YAAaA","file":"obd2-js.min.js","sourcesContent":["(function() {\r\n    'use strict';\r\n    /*global angular*/\r\n    \r\n    angular.module('OBD2', [\r\n        'OBD2.codes'\r\n    ]);\r\n})();\n(function() {\r\n    'use strict';\r\n    /*global angular*/\r\n    \r\n    angular\r\n        .module('OBD2.codes', []);\r\n})();\n(function() {\r\n    'use strict';\r\n    /*global angular*/\r\n    \r\n    angular\r\n        .module('OBD2.codes')\r\n        .factory('answerDecoder', function() {\r\n            var ERR_INVALID_INPUT = \"Invalid input\",\r\n                \r\n                WHITE_SPACES = /\\s/g;\r\n            \r\n            function toBitmask(codedValue) {\r\n                var codedValueWithoutSpaces = codedValue.replace(WHITE_SPACES, ''),\r\n                    valueArray,\r\n                    result = \"\";\r\n                if (codedValueWithoutSpaces.length % 2 !== 0) {\r\n                    throw new Error(ERR_INVALID_INPUT);\r\n                }\r\n                valueArray = codedValueWithoutSpaces.match(/.{1,2}/g);\r\n                for(var index = 0; index < valueArray.length; index++) {\r\n                    var binaryRepresentation = parseInt(valueArray[index], 16).toString(2);\r\n                    while(binaryRepresentation.length < 8) {\r\n                        binaryRepresentation = '0' + binaryRepresentation;\r\n                    }\r\n                    result += binaryRepresentation;\r\n                }\r\n                return result;\r\n            }\r\n            \r\n            function parseAnswer(answer) {\r\n                var result = {},\r\n                    answerWithoutSpaces = answer.replace(WHITE_SPACES, '');\r\n                    console.log(answerWithoutSpaces.length <= 4);\r\n                if(answerWithoutSpaces.length <= 4 || answerWithoutSpaces.length % 2 !== 0) {\r\n                    throw new Error(ERR_INVALID_INPUT);\r\n                }\r\n                result = {\r\n                    answerFor: answerWithoutSpaces.substring(0,4),\r\n                    answer: answerWithoutSpaces.substring(4)\r\n                }\r\n                return result;\r\n            }\r\n            return {\r\n                toBitmask: toBitmask,\r\n                parseAnswer: parseAnswer\r\n            };\r\n        });\r\n})();"],"sourceRoot":"/source/"}